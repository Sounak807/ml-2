import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split as TTS
from sklearn.preprocessing import StandardScaler as SS
from sklearn.metrics import accuracy_score as AS, recall_score as RS, precision_score as PS, f1_score as F1, confusion_matrix as CM, roc_curve, auc

from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.naive_bayes import GaussianNB as GNB
from sklearn.neighbors import KNeighborsClassifier as KNN
from sklearn.svm import SVC

columns = [
    "Pregnancies", "Glucose", "BloodPressure", "SkinThickness", 
    "Insulin", "BMI", "DiabetesPedigreeFunction", "Age", "Outcome"
]

data = pd.read_csv('pima-indians-diabetes.data.csv', names=columns)

data.replace('?', np.nan, inplace=True)
data.dropna(inplace=True)

print(data.head())
print(data.dtypes)






X = data.iloc[:,:-1]
y = data.iloc[:,-1]

scaler = SS()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = TTS(X_scaled, y, test_size=0.2, random_state=42)

def eval(model, name, colour):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    if(hasattr(model, "predict_proba")):
        y_prob = model.predict_proba(X_test)[:,1]
    else:
        y_prob = model.decision_function(X_test)

    acc = AS(y_test, y_pred)
    rec = RS(y_test, y_pred)
    prec = PS(y_test, y_pred)
    f1 = F1(y_test, y_pred)

    cm = CM(y_test, y_pred)
    cms.append(cm)

    fpr, tpr, _ = roc_curve(y_test, y_prob)
    roc_auc = auc(fpr, tpr)

    plt.plot(fpr, tpr, color=colour, label=f'Model: {name} ROC: {roc_auc:.4f}')

    return {
        "Model": name,
        "Accuracy": acc,
        "Recall": rec,
        "Precision": prec,
        "F1 Score": f1
    }






metrics_list = []
cms = []

plt.style.use('dark_background')
plt.figure(figsize=(7,4))

metrics_list.append(eval(SVC(kernel='linear', probability=True), 'SVC(Linear)', 'blue'))
metrics_list.append(eval(GNB(), 'Gaussian NB', 'red'))
metrics_list.append(eval(DTC(), 'Decision Tree', 'yellow'))
metrics_list.append(eval(KNN(n_neighbors=4), 'KNN', 'green'))

plt.plot([0,1], [0,1], ls='-.', color='white')
plt.xlabel('FPR')
plt.ylabel('TPR')
plt.title('FPR vs TPR')
plt.legend()
plt.show()




print(pd.DataFrame(metrics_list))
def plot_confmat(conf_mat, name, colour):
    plt.figure(figsize=(8,5))
    sns.heatmap(conf_mat, annot=True, fmt='d', cmap=colour, xticklabels=['Positive', 'Negative'], yticklabels=['Positive', 'Negative'])
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.title(f'Model: {name}')
    plt.show()

plot_confmat(cms[0], 'SVC(linear)', 'Blues')
plot_confmat(cms[1], 'GSNB', 'Reds')
plot_confmat(cms[2], 'Decision T', 'Purples')
plot_confmat(cms[3], 'KNN', 'Oranges')