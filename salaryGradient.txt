import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score as R2, mean_squared_error as MSE, accuracy_score as AS

data = pd.read_csv('salary_data.csv')
print(data.info())
print(data)




data.dropna(inplace=True)
X = data['YearsExperience'].values
y = data['Salary'].values

X_mean = np.mean(X)
X_std = np.std(X)
X = (X - X_mean) / X_std

X = np.c_[(np.ones(X.shape[0]), X)]
print(X)





theta = np.zeros(2)
epochs = 1000
learning_rate = 0.01

m = len(y)

cost_hist = []

plt.style.use('dark_background')

for epoch in range(epochs):
    y_pred = X.dot(theta)

    error = y_pred - y

    gradient = (1/m)*X.T.dot(error)

    theta -= learning_rate * gradient

    mse = MSE(y, y_pred)
    cost_hist.append(mse)
    if epoch % 100 == 0:
        plt.figure(figsize=(7,5))
        plt.scatter(data['YearsExperience'], y, color='orangered', alpha=0.6, label='Actual')
        plt.plot(data['YearsExperience'], y_pred, color='cyan', ls='-.', label='Predicted')
        plt.xlabel('Years of Experience')
        plt.ylabel('Salary')
        plt.title(f'Salary Prediction at Epoch: {epoch}')
        plt.legend()
        plt.show()





y_pred = X.dot(theta)
r2 = R2(y, y_pred)
print(f"R2 Score: {r2:.4f}, Theta 0: {theta[0]:.4f}, Theta 1: {theta[1]:.4f}")

plt.figure(figsize=(8,5))
plt.plot(range(epochs), cost_hist, color='yellow')
plt.show()