import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split as TTS, GridSearchCV as GSCV
from sklearn.preprocessing import StandardScaler as SS
from sklearn.linear_model import Lasso, Ridge
from sklearn.metrics import r2_score as R2, mean_squared_error as MSE

data = pd.read_csv('housing_price_dataset.csv')
print(data.head())




data.drop(columns=['Address'], errors='coerce', inplace=True)
print(data.head())
print(data.info())
data.dropna(inplace=True)





X = data.iloc[:,:-1]
y = data.iloc[:,-1]

scaler = SS()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = TTS(X_scaled, y, test_size=0.2, random_state=42)

param_grid = {'alpha': np.logspace(-3, 3, 7)}

#Lasso
lasso = Lasso(max_iter=10000)
lasso_grid = GSCV(lasso, param_grid, scoring='r2', cv=5)
lasso_grid.fit(X_train, y_train)
best_lasso = lasso_grid.best_estimator_

#Ridge
ridge = Ridge()
ridge_grid = GSCV(ridge, param_grid, scoring='r2', cv=5)
ridge_grid.fit(X_train, y_train)
best_ridge = ridge_grid.best_estimator_

y_pred_lasso = best_lasso.predict(X_test)
y_pred_ridge = best_ridge.predict(X_test)

r2_lasso = R2(y_test, y_pred_lasso)
r2_ridge = R2(y_test, y_pred_ridge)
mse_lasso = MSE(y_test, y_pred_lasso)
mse_ridge = MSE(y_test, y_pred_ridge)

print(f"Best lasso parameter: {lasso_grid.best_params_['alpha']}, R2: {r2_lasso:.4f}")
print(f"Best ridge parameter: {ridge_grid.best_params_['alpha']}, R2: {r2_ridge:.4f}")

print(f"Lasso MSE: {mse_lasso:.4f}, Ridge MSE: {mse_ridge:.4f}")







plt.style.use('dark_background')
plt.figure(figsize=(12, 5))


#Lasso
plt.subplot(1, 2, 1)
plt.scatter(y_test, y_pred_lasso, color='cyan', alpha=0.6, label='Predicted')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='orangered', label='Actual', linestyle='-.')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Lasso: Actual vs Predicted')
plt.legend()

#Ridge
plt.subplot(1, 2, 2)
plt.scatter(y_test, y_pred_ridge, color='yellow', alpha=0.6, label='Predicted')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='white', label='Actual', ls='-.')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Ridge: Actual vs Predicted')
plt.legend()
plt.show()