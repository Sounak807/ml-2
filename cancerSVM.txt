import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split as TTS
from sklearn.metrics import (accuracy_score as AS, recall_score as RS, precision_score as PS, f1_score as F1, jaccard_score as JS, confusion_matrix as CM, roc_curve, auc)
import seaborn as sns
from sklearn.preprocessing import StandardScaler as SS

data = pd.read_csv('samples_cancer.csv')
print(data.dtypes)
print(data.head(10))




data.replace('?', np.nan, inplace=True)
data.dropna(inplace=True)
data.drop(columns=['ID'], inplace=True, errors='ignore')
data['BareNuc'] = pd.to_numeric(data['BareNuc'])
data['Class'] = data['Class'].map({2: 0, 4: 1})
print(data.dtypes)
print(data.head(10))




X = data.iloc[:,:-1]
y = data.iloc[:,-1]

scaler = SS()

X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = TTS(X_scaled, y, test_size=0.2, random_state=42)





def evaluation(model, name, colour):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_prob = model.decision_function(X_test)

    acc = AS(y_test, y_pred)
    rec = RS(y_test, y_pred)
    prec = PS(y_test, y_pred)
    f1 = F1(y_test, y_pred)
    jac = JS(y_test, y_pred)
    err = 1 - acc

    cm = CM(y_test, y_pred)
    cMs.append(cm)

    fpr, tpr, _ = roc_curve(y_test, y_prob)
    roc_auc = auc(fpr, tpr)

    print(f"-----------{name}-----------")
    print(f"Accuracy: {acc:.4f}")
    print(f"Recall: {rec:.4f}")
    print(f"Precision: {prec:.4f}")
    print(f"F1 Score: {f1:.4f}")
    print(f"Jaccard Score: {jac:.4f}")
    print(f"Error: {err:.4f}")
    
    plt.plot(fpr, tpr, color=colour, label=f'Model: {name}  AUC = {roc_auc:.4f}')

    return





cMs = []

plt.style.use('dark_background')
plt.figure(figsize=(7,4))

evaluation(SVC(kernel='linear', probability=True), 'Linear', 'cyan')
evaluation(SVC(kernel='poly', degree=4, probability=True), 'Polynomial', 'orangered')
evaluation(SVC(kernel='rbf', probability=True), 'RBF', 'green')
evaluation(SVC(kernel='sigmoid', probability=True), 'Sigmoid', 'blue')


plt.plot([0,1], [0,1], ls='-.', color='white')
plt.xlabel('FPR')
plt.ylabel('TPR')
plt.title('ROC Curve')
plt.legend()
plt.show()





def conf(conf_mat, name, colour):
    plt.figure(figsize=(7,5))
    sns.heatmap(conf_mat, annot=True, fmt='d', cmap=colour, xticklabels=['Benging\nPredicted', 'Malignant\nPredicted'], yticklabels=['Benging\nActual', 'Malignant\nactual'])
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.title(f'Confusion Matrix: {name}')
    plt.show()


conf(cMs[0], 'Linear', 'Blues')
conf(cMs[1], 'Polynomial', 'Reds')
conf(cMs[2], 'RBF', 'Purples')
conf(cMs[3], 'Sigmoid', 'Oranges')